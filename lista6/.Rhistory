########################################################
###               Pacotes Necess√É¬°rios                ###
########################################################
library(fields)
########################################################
###               Pacotes Necess√É¬°rios                ###
########################################################
install.packages("fields")
install.packages("car")
library(fields)
library(car)
dados.c <- function(alfa=1, beta1=3, beta2=2, beta3=1, rho=0, rho2=0, n=30, sigma=10) {
# alfa - valor verdadeiro para alfa
# beta1 - valor verdadeiro para o beta
# beta2 - valor verdadeiro para o beta2
# beta3 - valor verdadeiro para o beta2
# rho - correlacao entre x e x2 e x3
# n - tamanho da amostra
# sigma - desvio padrao da distribuicao do erro
x1 <<- rnorm(n,0,1) # vari√É¬°vel cont√É≠nua
x2 <<- x1*rho + rnorm(n,0,1)*sqrt(1-rho^2) # vari√É¬°vel cont√É≠nua associada a X
x3 <<- x1*rho2 + rnorm(n,0,1)*sqrt(1-rho2^2)
x3 <<- ifelse(x3>mean(x3),1,0) # vari√É¬°vel dicotomica
e <<- rnorm(n,0,1)
y <<- alfa + beta1*x1 + beta2*x2 - beta3*x3 + sigma*e
}
dados.e <- function(alfa=1, beta1=3, beta2=2, beta3=1, rho=0, rho2=0, n=30, sigma=10) {
# alfa - valor verdadeiro para alfa
# beta1 - valor verdadeiro para o beta
# beta2 - valor verdadeiro para o beta2
# beta3 - valor verdadeiro para o beta2
# rho - correlacao entre x e x2 e x3
# n - tamanho da amostra
# sigma - desvio padrao da distribuicao do erro
x1 <<- rbinom(n,size=3,prob=0.3)
x2 <<- x1*rho + rnorm(n,42,10)*sqrt(1-rho^2)
x3 <- x1*rho2 + rnorm(n,50,32)*sqrt(1-rho^2)
x3 <<- ifelse(x3>mean(x3),1,0) # vari√É¬°vel dicotomica
e <<- rgamma(n,shape=1)
y <<- alfa + beta1*x1^2 + beta2*x2 + beta3*x3 + sigma*e
}
banco <- read.csv("C:/Users/test/Documents/GitHub/analisedados/lista6", header= T )
banco <- read.csv("C:/Users/test/Documents/GitHub/analisedados/lista6/simula.correto.csv", header= T )
banco2 <- read.csv("C:/Users/test/Documents/GitHub/analisedados/lista6/simula.errado.csv", header=T)
attach(banco)
?attach
# As duas linhas abaixo produzem uma tabela descritiva com as principais medidas
# de tendencia central e de dispers√É¬£o das vari√É¬°veis produzidas.
variav.descrit <- data.frame(y, x1, x2, x3)
t(stats(variav.descrit))
# Box-plot
par(mfrow=c(1,1))
# Box-plot
?par
par(mfrow=c(1,1))
boxplot(y, x1, x2, names = c('Y','X','X2'), ylim = c(-20,20))
# Histogramas e Box-plots das distribui√ß√µes de y, x1, x2
par(mfrow = c(1,3))
hist(y, main = "Histograma de Y")
hist(x1, main = "Histograma de X1")
hist(x2, main ="Histograma de X2")
modelo.1 <- lm(y ~ x1)
modelo.2 <- lm(y ~ x1 + x2)
modelo.3 <- lm(y ~ x2 + x3)
modelo.4 <- lm(y ~ x1 + x3)
modelo.f <- lm(y ~ x1 + x2 + x3)
# Tabela da ANOVA
tab.ANOVA <- function(modelo, gln, gld) {
# modelo - modelo de regressao testado
# gln - graus de liberdade do numerador
# gld - graus de liberdade do denominador
SSreg <- sum((y-mean(y))^2)
print(paste('SSreg:'))
print(SSreg)
RSS <- sum(modelo$res^2)
print(paste('RSS:'))
print(RSS)
F.teste <- ((SSreg-RSS)/(gln)/(RSS/gld))
print(paste('F:'))
print(F.teste)
print(paste('P-valor:'))
1-pf(F.teste,3,196)
}
tab.ANOVA(modelo.f, 3, 196)
summary(modelo.f)
# Gr√É¬°fico para a representa√ßao dos intervalos de confian√ßa dos coeficientes estimados
par(mfrow = c(1,1))
betas <- coefficients(modelo.f)
IC <-  confint(modelo.f, level = 0.95)
y.axis <- seq(from=1, to=length(betas))
y.axis <- seq(from = 1, to = length(betas))
plot(betas, y.axis, type = "p", pch = 19, xlab = "Magnitude dos Coeficientes",
ylab ="", axes = F, xlim = c(min(IC - .4), max(IC + .4)),
ylim = c(min(y.axis-.2), max(y.axis+.2)), cex = 1,yaxs = "i",xaxs = "i")
segments(IC[,1], y.axis, IC[,2], y.axis)
axis(1, at = seq(round(min(IC - .9)), round(max(IC + .9)), by = 0.1),
labels = seq(round(min(IC - .9)), round(max(IC + .9)), by=0.1), tick=T, cex.axis=1, mgp=c(2,.7,0))
axis(2, at=y.axis, label=names(betas), las=1, tick=T, line=-.5, cex.axis=1, mgp=c(2,.7,0))
abline(v=0, lty=2, col="red")
# Tabela com os resultados da regress√É¬£o
summary(modelo.1)
summary(modelo.2)
summary(modelo.3)
summary(modelo.4)
summary(modelo.f)
novo.x <- data.frame(x1 = seq(min(x1), max(x1), length.out = dim(banco)[1]), x2 = mean(x2), x3 = mean(x3))
novo.x2 <- data.frame(x1 = mean(x1), x2 = seq(min(x2), max(x2), length.out = dim(banco)[1]),  x3 = mean(x3))
novo.x3 <- data.frame(x1 = mean(x1), x2 = mean(x2), x3 = seq(min(x3), max(x3), length.out = dim(banco)[1]))
par(mfrow = c(1,3))
y.predito <- predict(modelo.f, novo.x, interval = "confidence")
matplot(novo.x$x1, y.predito, lty = c(1,2,2), col = c('black', 'red', 'red'),
type = "l", ylab = "Valor predito de Y", xlab = "X")
abline(h=0, col='gray', lty=3)
y.predito <- predict(modelo.f, novo.x2, interval = "confidence")
matplot(novo.x2$x2, y.predito, lty = c(1,2,2), col = c('black', 'red', 'red'), type = "l", ylab = "Valor predito de Y", xlab = "X2")
abline(h=0, col = 'gray', lty = 3)
y.predito <- predict(modelo.f, novo.x3, interval = "confidence")
matplot(novo.x3$x3, y.predito, lty = c(1,2,2), col=c('black', 'red', 'red'), type = "l", ylab = "Valor predito de Y", xlab = "X3")
abline(h = 0, col = 'gray', lty = 3)
detach(banco)
modelo1 <- lm(y ~ x1 + x2 + x3, data = banco)
modelo2 <- lm(y ~ x1 + x2 + x3, data = banco2)
par(mfrow=c(1,2))
outlierTest(modelo1)
outlierTest(modelo2)
qqPlot(modelo1, main = "QQ Plot 1")
qqPlot(modelo2, main = "QQ Plot 2")
avPlots(modelo1)
avPlots(modelo2)
influencePlot(modelo1, id.method = "identify", main = "Gr√°fico de Influ√™ncia 1", ylim = c(-6, 6), xlim = c(0, 0.25))
influencePlot(modelo2, id.method = "identify", main="Gr√°fico de Influ√™ncia 2", ylim = c(-6, 6 ), xlim = c(0, 0.25))
sresid <- studres(modelo1)
hist(sresid, freq = FALSE, ylim = c(0, 0.4), main = "Distribui√ß√£o dos Res√≠duos Padronizados 1")
xfit <- seq(min(sresid), max(sresid), length = 40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
### Checando a Normalidade dos Res√≠duos ###
# distribution of studentized residuals
sresid <- studres(modelo1)
?studres
install.packages("MASS")
install.packages("MASS")
library("MASS")
### Checando a Normalidade dos Res√≠duos ###
# distribution of studentized residuals
sresid <- studres(modelo1)
hist(sresid, freq = FALSE, ylim = c(0, 0.4), main = "Distribui√ß√£o dos Res√≠duos Padronizados 1")
xfit <- seq(min(sresid), max(sresid), length = 40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
sresid <- studres(modelo2)
hist(sresid, freq = FALSE, main = "Distribui√á√Éo dos Res√≠duos Padronizados 2")
xfit <- seq(min(sresid),max(sresid),length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
hist(sresid, freq = FALSE, main = "Distribui√ß√£o dos Res√≠duos Padronizados 2")
sresid <- studres(modelo2)
hist(sresid, freq = FALSE, main = "Distribui√ß√£o dos Res√≠duos Padronizados 2")
xfit <- seq(min(sresid),max(sresid),length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
sresid <- studres(modelo1)
hist(sresid, freq = FALSE, ylim = c(0, 0.4), main = "Distribui√ß√£o dos Res√≠duos Padronizados 1")
xfit <- seq(min(sresid), max(sresid), length = 40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
?studres
sresid <- studres(modelo2)
hist(sresid, freq = FALSE, main = "Distribui√ß√£o dos Res√≠duos Padronizados 2")
xfit <- seq(min(sresid),max(sresid),length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit)
ncvTest(modelo1)
ncvTest(modelo2)
spreadLevelPlot(modelo1)
spreadLevelPlot(modelo2)
modelo1 <- lm(y ~ x1 + x2 + x3, data = banco)
spreadLevelPlot(modelo1)
spreadLevelPlot(modelo2)
spreadLevelPlot(modelo1)
spreadLevelPlot(modelo2)
crPlots(modelo1)
crPlots(modelo2)
### Teste para Colinearidade ###
vif(modelo1) # variance inflation factors
sqrt(vif(modelo1)) > 2 # problem?
par(mfrow = c(1,2))
plot(banco$x1, banco$x2, xlab = 'x1', ylab = 'x2') # plot de correla√ß√£o
plot(banco2$x2, banco2$x5, xlab = 'x1', ylab = 'x5')
### Teste para autocorrela√ß√£o dos erros ###
durbinWatsonTest(modelo1)
setwd("C:/Users/test/Desktop/dados/golder_des")
des <- read.csv("es_data-v3.csv")
View(des)
setwd("C:\Users/test/Documents/GitHub/analisedados/lista6")
setwd("C:/Users/test/Documents/GitHub/analisedados/lista6")
save.image("~/GitHub/analisedados/lista6/6-lista-ad-ufpe-lucas-miranda.Rdata.RData")
library(foreign)
dbsamuels <- read.dta("samuels.dta")
head(dbsamuels)
model1 <- lm(data = dbsamuels, enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
summary(model1)
View(dbsamuels)
dbsamuels2 <- ifelse(dbsamuels$yeardeputy == c("1950", "1994", "1998"))
dbsamuels2 <- ifelse(dbsamuels$yeardeputy == c("1950", "1994", "1998"), yes)
dbsamuels2 <- ifelse(dbsamuels$yeardeputy == c("1950", "1994", "1998"), T)
dbsamuels2 <- ifelse(dbsamuels$yeardeputy == c("1950", "1994", "1998"),)
dbsamuels2 <- ifelse(dbsamuels$yeardeputy = c("1950", "1994", "1998"),)
dbsamuels2 <- ifelse(dbsamuels$yeardeputy == c("1950", "1994", "1998"), F)
?ifelse
dbsamuels2 <- ifelse(yes = dbsamuels$yeardeputy == c("1950", "1994", "1998"),)
dbsamuels2 <- ifelse(dbsamuels, yes = dbsamuels$yeardeputy == c("1950", "1994", "1998"),)
model1 <- lm(data = dbsamuels$yeardeputy == "1950", enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
model1 <- lm(data = dbsamuels$yeardeputy = "1950", enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
hillary <- read.dta("hillary.dta")
head(hillary)
View(hillary)
model1hillary <- lm(data = hillary, hillary_thermo ~ income*jewish)
summary(model1hillary)
model1hillary <- lm(data = hillary, hillary_thermo ~ income + jewish + income*jewish)
summary(model1hillary)
library(ggplot2)
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish))
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish)
geom_point())
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish)) +
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish, y = hillary_thermo)) +
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income*jewish, y = hillary_thermo)) +
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income + jewish, y = hillary_thermo)) +
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income, y = hillary_thermo)) +
geom_point()
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish, y = hillary_thermo)) +
geom_point()
ncvTest(model1hillary)
spreadLevelPlot(model1hillary)
crPlots(modelhillary)
crPlots(model1hillary)
plot(residuals(model1hillary)fitted(model1hillary))
plot(residuals(model1hillary), fitted(model1hillary))
model1hillary <- lm(data = hillary, log(hillary_thermo) ~ income + jewish + income*jewish)
model1hillary <- glm(data = hillary, log(hillary_thermo) ~ income + jewish + income*jewish)
model1hillary <- lm(data = hillary, log(hillary_thermo) ~ income + jewish + income*jewish)
model1hillary <- lm(data = hillary, hillary_thermo ~ log(income) + log(jewish) + log(income*jewish)
model1hillary <- lm(data = hillary, hillary_thermo ~ log(income) + log(jewish) + log(income*jewish))
model1hillary <- lm(data = hillary, hillary_thermo ~ log(income) + log(jewish) + log(income*jewish)
summary(model1hillary)
model1hillary <- lm(data = hillary, hillary_thermo ~ log(income) + log(jewish) + log(income*jewish))
model1hillary <- lm(data = hillary, hillary_thermo ~ log(income) + jewish + log(income)*jewish)
summary(model1hillary)
plot(residuals(model1hillary), fitted(model1hillary))
# plot de residuos padronizados x valores preditos
spreadLevelPlot(model1hillary)
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish, y = hillary_thermo)) +
geom_point()
# plot do modelo
ggplot(data = model1hillary, mapping = aes(x = log(income) + jewish + income*jewish, y = hillary_thermo)) +
geom_point()
# plot do modelo
ggplot(data = model1hillary, mapping = aes(x = log(income) + jewish + log(income)*jewish,
y = hillary_thermo)) +
geom_point()
model1hillary <- lm(data = hillary, hillary_thermo ~ income + jewish + income*jewish)
summary(model1hillary)
# plot do modelo
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish,
y = hillary_thermo)) +
geom_point()
save.image("~/GitHub/analisedados/lista6/6-lista-ex4-ex5-ad-ufpe-lucas-miranda.RData")
dbsamuels <- read.dta("samuels.dta")
library(foreign)
dbsamuels <- read.dta("samuels.dta")
head(dbsamuels)
model1 <- lm(data = dbsamuels, enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
summary(model1)
samuels1 <- dbsamuels[dbsamuels$yeardeputy %in% c(1950, 1994)]
samuels1 <- dbsamuels[dbsamuels$yeardeputy %in% c(1950, 1994),]
View(dbsamuels1)
View(samuels1)
samuels2 <- dbsamuels[dbsamuels$yeardeputy %in% c(1950, 1998),]
samuels3 <- dbsamuels[dbsamuels$yeardeputy %in% c(1994, 1998),]
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
summary(samuels1)
summary(model1)
summary(samuels1$proxgov)
summary(dbsamuels$proxgov)
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950,]
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov*engov +
proxpres + proxpres*enpres)
summary(model1)
View(samuels1)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres)
summary(model1)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + factor(yeardeputy) + factor(state))
summary(model1)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + factor(yeardeputy) + factor(state) - 1)
summary(model1)
colnames(dbsamuels)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + factor(yeardeputy) + year1945 + year1947
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + factor(yeardeputy) + year1945 + year1947 +
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp)
summary(model1)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + year1945 + year1947 +
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp)
summary(model1)
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + year1945 + year1947 +
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp - 1)
summary(model1)
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950, 1994]
samuels1 <- dbsamuels[!(dbsamuels$yeardeputy %in% c(1950, 1994)),]
samuels1 <- dbsamuels[!(dbsamuels$yeardeputy %in% c(1950, 1994, 1998)),]
samuels1 <- dbsamuels[!(dbsamuels$yeardeputy %in% c(1950, 1994)),]
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + year1945 + year1947 +
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp - 1)
summary(model1)
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950,]
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950,]
summary(samuels$yeardeputy)
summary(samuels1$yeardeputy)
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950 &
dbsamuels$yeardeputy > 1964 &
dbsamuels$yeardeputy < 1989,]
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950 &
dbsamuels$yeardeputy < 1964 &
dbsamuels$yeardeputy > 1989,]
samuels1 <- dbsamuels[dbsamuels$yeardeputy != 1950 &
dbsamuels$yeardeputy < 1964 |
dbsamuels$yeardeputy > 1989,]
model1 <- lm(data = samuels1, enlists ~ logmag + proxgov + proxgov:engov +
proxpres + proxpres:enpres + year1945 + year1947 +
year1954 + year1958 + year1962 + year1990 + year1994 + year1998 +
ac + al + am  +
ap + ba + ce + df +
es + gb + go + ma +
mg + ms + mt + pa +
pb + pe + pi + pr +
rj + rn + ro + rr +
rs + sc + se + sp - 1)
summary(model1)
library(foreign)
dbsamuels <- read.dta("samuels.dta")
model1 <- dbsamuels %>% filter(yeardeputy != 1950)
library(tidyverse)
model1 <- dbsamuels %>% filter(yeardeputy != 1950)
m1 <- lm(data = dbsamuels, enlists ~ proxgov + engov_proxgov + proxpres + enpres_proxpres
+ factor(yeardeputy) + factor(state))
summary(m1)
m1 <- lm(data = dbsamuels, enlists ~  logmag + proxgov + engov_proxgov + proxpres + enpres_proxpres
+ factor(yeardeputy) + factor(state))
summary(m1)
View(dbsamuels)
hillary <- read.dta("hillary.dta")
model1hillary <- lm(data = hillary, hillary_thermo ~ income + jewish + income*jewish)
summary(model1hillary)
library(ggplot2)
ggplot(data = model1hillary, mapping = aes(x = income + jewish + income*jewish,
y = hillary_thermo)) +
geom_point()
plot(residuals(model1hillary), fitted(model1hillary))
# plot do modelo
ggplot(data = model1hillary, mapping = aes(x = fitted(model1hillary),
y = hillary_thermo)) +
geom_point()
model1hillary <- lm(data = hillary, hillary_thermo ~ income + jewish + income*jewish)
summary(model1hillary)
# plot do modelo
plot(model1hillary)
model1hillary <- lm(data = hillary, hillary_thermo ~ income + factor(jewish) + income*jewish)
model1hillary <- lm(data = hillary, hillary_thermo ~ income + factor(jewish) + income*jewish)
# plot do modelo
plot(model1hillary)
if(require(broom) == F) install.packages('broom'); require(broom)
dwplot(model1hillary, vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2))
library(ggplot2)
dwplot(model1hillary, vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2))
require(dotwhisker)
dwplot(model1hillary, vline = geom_vline(xintercept = 0, colour = "grey60", linetype = 2))
# plot de residuos padronizados x valores preditos
spreadLevelPlot(model1hillary)
?spreadlevel
?spreadLevelPlot
library(tidyverse)
# plot de residuos padronizados x valores preditos
spreadLevelPlot(model1hillary)
?spreadLevelPlot
# plot de residuos padronizados x valores preditos
library(car)
spreadLevelPlot(model1hillary)
summary(model1hillary)
model1hillary <- lm(data = hillary, hillary_thermo ~ income + jewish + income*jewish)
summary(model1hillary)
-0.99 + 1.41
# gr√°fico com os coeficientes de regress√£o e com os intervalos de confian√ßa
library(dotwhisker)
library(broom)
